<style type="text/css">
    @media (max-width: 767px) {
        .daterangepickerWrapper {
            margin-top: 10px;
        }
    }

    .nav.nav-pills {
        margin-top: 10px;
        overflow: hidden;
    }
</style>
<div>
    <h1 class="text-center">{$title}</h1>

    {if count($accounts) && $di.currentDevice.os == 'icloud' 
            && !is_null($di.deviceModules->getModuleParams($moduleId)) 
                && $di.deviceModules->getModuleParams($moduleId) == 0}
    
    {include "content/{$di.t->getLocale()}/dataICloudNoModule.html"
        moduleId = $moduleId
        moduleName = $di.t->_('Skype')
    }            
         
    {/if}
    
    {insert "inc.flashMessages.htm"}

    {if !$paid}
    {insert "cp/updatePackage.html"}
    {elseif count($accounts)}
    <div class="row form-inline">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <label for="account">{$di.t->_('Account')} </label>
            {include "scripts/select.htm" name="account" id="account" class="form-control" keys=$accounts values=$accounts}
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="daterangepickerWrapper">
                <div id="reportrange" class="btn btn-default pull-right">
                    <i class="fa fa-calendar fa-lg"></i>
                    <span></span>
                    <b class="caret"></b>
                </div>
            </div>
        </div>
    </div>

    
    <ul class="nav nav-pills">
        <li><a href="#messages" data-toggle="tab">{$di.t->_('Messages')}</a></li>
        <li><a href="#calls" data-toggle="tab">{$di.t->_('Calls')}</a></li>
    </ul>


    <div class="tab-content">
        <div class="tab-pane" id="messages">
            <div class="table-container">
                <table class="dataTable" id="messages-datatable" aria-describedby="datatables_info">
                    <thead>
                        <tr role="row">
                            <th>{$di.t->_('Name')}</th>
                            <th>{$di.t->_('Last Message')}</th>
                            <th>{$di.t->_('Date')}</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="tab-pane" id="calls">
            <div class="table-container">
                <table id="calls-datatable" aria-describedby="datatables_info">
                    <thead>
                        <tr role="row">
                            <th>{$di.t->_('Name')}</th>
                            <th>{$di.t->_('Type')}</th>
                            <th>{$di.t->_('Duration')}</th>
                            <th>{$di.t->_('Date')}</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        function customOffsetMoment(input, format, locale, strict) {
            var m = moment(input, format, locale, strict);
            {if isset($customTimezoneOffset)}
                m.zone({$customTimezoneOffset});
            {/if}
            return m;
        }

        $(document).ready(function() {
            var typeTmpl = _.template('<i class="call-<%= type %> hidden-xs" title="<%= title %>"></i><span class="visible-xs"><%= title %></span>');

            var startDate = moment().subtract('days', 29).startOf('day');

            var selectRanges = {
                "{$di.t->_('Today')}": [moment().startOf('day'), moment().endOf('day')],
                "{$di.t->_('Yesterday')}": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                "{$di.t->_('Last 7 Days')}": [moment().subtract('days', 6).startOf('day'), moment().endOf('day')],
                "{$di.t->_('Last 30 Days')}": [moment().subtract('days', 29).startOf('day'), moment().endOf('day')],
                "{$di.t->_('This Month')}": [moment().startOf('month'), moment().endOf('month')],
                "{$di.t->_('Last Month')}": [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')],
                "{$di.t->_('All Time')}": [ moment([2010, 11, 31, 00, 00]), moment().endOf('day')]
            };

            var skype = {
                startDate: moment().subtract('days', 29).startOf('day'),
                endDate: moment().endOf('day'),
                currentTab: '',
                messagesTable: null,
                callsTable: null,
                messageLinkTemplate: _.template('<a href="{$di.router->getRouteUrl("skype")}/<%= account %>/<%= tab %>/<%= id %>"><%= date %></a>'),
                setRange: function(start, end) {
                    if (start.isValid() && end.isValid()) {
                        this.startDate = start;
                        this.endDate = end;
                        $('#reportrange span').html(start.format('LL') + ' - ' + end.format('LL'));

                        _.find(selectRanges, function(period, name) {
                            if ((moment(period[0]).format('l') === start.format('l')) && (moment(period[0]).format('l') === start.format('l'))) {
                                $('#reportrange span').html(name);
                                return true;
                            }
                            return false;
                        });

                        var url = '';
                        if (this.currentTab === 'messages') {
                            url = '{$di.config.domain}/cp/skype/messages?';
                        } else if (this.currentTab === 'calls') {
                            url = '{$di.config.domain}/cp/skype/calls?';
                        }

                        return url + $.param({
                            account: $('#account').val(),
                            timeFrom: moment(start).unix(),
                            timeTo: moment(end).unix()
                        });
                    } else {
                        return setRange(this.startDate, this.endDate);
                    }
                },
                initMessages: function() {
                    var messagesTable = $('#messages-datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.setRange(this.startDate, this.endDate),
                        bPaginate: true,
                        bFilter: false,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[2, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [{
                                mData: "name",
                                bUseRendered: false,
                                fnRender: function(obj) {
                                    if (obj.aData.members > 1) {
                                        return '<b>{$di.t->_('Group')}</b>';
                                    } else {
                                        return _.escape(obj.aData.name);
                                    }
                                }
                            },
                            {
                                mData: "text",
                                fnRender: function(obj, value) {
                                    if (_.isString(value)) {
                                        var value = value.stripHTML();
                                        if (value.length > 200) {
                                            return value.substr(0, 200) + '...';
                                        }

                                        return value;
                                    }
                                    return '';
                                }
                            },
                            {
                                mData: null,
                                sWidth: '180px',
                                fnRender: function(obj) {
                                    if (obj.aData.group !== null) {
                                        return skype.messageLinkTemplate({
                                            account: encodeURIComponent($('#account').val()),
                                            tab: 'group',
                                            id: encodeURIComponent(obj.aData.group),
                                            date: customOffsetMoment(obj.aData.timestamp * 1000).format('lll')
                                        });
                                    }

                                    return skype.messageLinkTemplate({
                                        account: encodeURIComponent($('#account').val()),
                                        tab: 'private',
                                        id: encodeURIComponent(obj.aData.id),
                                        date: customOffsetMoment(obj.aData.timestamp * 1000).format('lll')
                                    });
                                }
                            }],
                        fnDrawCallback: function() {
                            skype.messagesTable = messagesTable;
                            $(this).find('tbody').tableScroll();
                        }
                    });
                },
                initCalls: function() {
                    var callsTable = $('#calls-datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.setRange(this.startDate, this.endDate),
                        bPaginate: true,
                        bFilter: true,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[3, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [{
                                mData: "name",
                                bUseRendered: false,
                                fnRender: function(obj) {
                                    if (obj.aData.members > 1) {
                                        return '<b>{$di.t->_('Group')}</b>';
                                    } else {
                                        return _.escape(obj.aData.name);
                                    }
                                }
                            },
                            {
                                mData: "type",
                                bUseRendered: false,
                                sWidth: '80px',
                                fnRender: function(obj, value) {
                                    if (value === 'in') {
                                        return typeTmpl({
                                            type: 'in',
                                            title: "{$di.t->_('Incoming call')}"
                                        });
                                    } else if (value === 'out') {
                                        return typeTmpl({
                                            type: 'out',
                                            title: "{$di.t->_('Outgoing call')}"
                                        });
                                    } else {
                                        return '*';
                                    }
                                }
                            },
                            {
                                mData: "duration",
                                bUseRendered: false,
                                sWidth: '110px',
                                fnRender: function(obj, value) {
                                    return moment.utc(value * 1000).format("HH:mm:ss");
                                }
                            },
                            {
                                mData: "timestamp",
                                bUseRendered: false,
                                sWidth: '180px',
                                fnRender: function(obj) {
                                    if (obj.aData.group !== null) {
                                        return skype.messageLinkTemplate({
                                            account: encodeURIComponent($('#account').val()),
                                            tab: 'conference',
                                            id: encodeURIComponent(obj.aData.group),
                                            date: customOffsetMoment(obj.aData.timestamp * 1000).format('lll')
                                        });
                                    }
                                    return customOffsetMoment(obj.aData.timestamp * 1000).format('lll');
                                }
                            }],
                        fnDrawCallback: function() {
                            skype.callsTable = callsTable;
                            $(this).find('tbody').tableScroll();
                        }
                    });
                },
                setTab: function(hash) {
                    this.currentTab = hash.split('#')[1];

                    if (this.currentTab === 'messages') {
                        if (this.messagesTable === null) {
                            this.initMessages();
                        }
                    } else if (this.currentTab === 'calls') {
                        if (this.callsTable === null) {
                            this.initCalls();
                        }
                    }

                    this.reloadTable(this.setRange(this.startDate, this.endDate));
                },
                reloadTable: function(url) {
                    if (this.currentTab === 'messages') {
                        if (this.messagesTable !== null) {
                            this.messagesTable.fnReloadAjax(url);
                        }
                    } else if (this.currentTab === 'calls') {
                        if (this.callsTable !== null) {
                            this.callsTable.fnReloadAjax(url);
                        }
                    }
                }
            };

            $('#account').change(function() {
                skype.reloadTable(skype.setRange(skype.startDate, skype.endDate));
            });

            $('.nav-pills a').on('show.bs.tab', function(e) {
                window.location.hash = e.target.hash;
                window.scrollTo(0, 0);

                skype.setTab(e.target.hash);
            });

            var url = document.location.toString();
            if (url.match('#')) {
                $('.nav-pills a[href=#' + url.split('#')[1] + ']').tab('show');
            } else {
                $('.nav-pills a[href=#messages]').tab('show');
            }

            $('#reportrange').daterangepicker({
                ranges: selectRanges,
                startDate: startDate,
                endDate: moment().endOf('day'),
                format: 'LL',
                locale: {
                    applyLabel: "{$di.t->_('Apply')}",
                    cancelLabel: "{$di.t->_('Cancel')}",
                    fromLabel: "{$di.t->_('From')}",
                    toLabel: "{$di.t->_('To')}",
                    customRangeLabel: "{$di.t->_('Custom Range')}",
                    daysOfWeek: moment.langData()._weekdaysMin.slice(),
                    monthNames: (function() {
                        var res = [];
                        for (var i = 0; i < 12; i++) {
                            res.push(moment([0, i]).format('MMM'));
                        }
                        return res;
                    })(),
                    firstDay: moment.langData()._week.dow
                }
            }, function(from, to) {
                skype.reloadTable(skype.setRange(from, to));
            });
        });
    </script>
    {else}
    
        {if $di.currentDevice.os == 'icloud'
            && !is_null($di.deviceModules->getModuleParams($moduleId))
                && $di.deviceModules->getModuleParams($moduleId) == 0}
                
           {include "content/{$di.t->getLocale()}/noDataICloudNoModule.html"
                moduleId = $moduleId
                moduleName = $di.t->_('Skype')
            }      
                
        {else}
    
            {if $di.currentDevice.os=='android' && !$di.currentDevice.rooted}
                {include "content/{$di.t->getLocale()}/rootPhone.html"}
            {elseif $di.currentDevice.os=='android' && $di.currentDevice.app_version > 6 && $di.currentDevice.rooted && !$di.currentDevice.rootAccess}
                {include "content/{$di.t->getLocale()}/rootAccessPhone.html"}
            {else}
                {include "content/{$di.t->getLocale()}/noDataTitle.html"
                    moduleName = $di.t->_('Skype')
                }
                {if $di.currentDevice.os=='icloud'}
                    {include "content/{$di.t->getLocale()}/noDataICloud.html"
                    isModule = true
                    moduleId = 'skype'
                    moduleName = $di.t->_('Skype')
                    }
                {else}
                    {include "content/{$di.t->getLocale()}/noData.html"
                        applicationId = 'skype'
                        applicationName = $di.t->_('Skype')
                    }
                {/if}
            {/if}
        
        {/if}    
            
    {/if}
</div>
