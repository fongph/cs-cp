<style>
    .text-danger a {
        color: #a94442 !important;
    }
</style>
<div>
    <h1 class="text-center">{$title}</h1>

    {if isset($limitEnd) && !$limitEnd}
        <p class="bg-warning" style="padding: 10px;">
            Your limit has expired. You will not be able to monitor new SMS data any longer. 
            Please consider the opportunity to buy <a target="_blank" href="http://pumpic.com/store.html">Premium subscription</a> or an additional 
            <a href="http://pumpic.com/buy.html?product=unlimited-sms&device={$di.devId}">Unlimited SMS</a> option to resume monitoring.
        </p>
    {/if} 
    
    {insert "inc.flashMessages.htm"}

    {if $hasRecords}
    <div class="daterangepickerWrapper">
        <div id="reportrange" class="btn btn-default pull-right">
            <i class="fa fa-calendar fa-lg"></i>
            <span></span>
            <b class="caret"></b>
        </div>
    </div>

    <div class="table-container">
        <table class="dataTable" id="datatable" aria-describedby="datatables_info">
            <thead>
                <tr role="row">
                    <th>{$di.t->_('Date')}</th>
                    <th>{$di.t->_('Type')}</th>
                    <th>{$di.t->_('Number')}</th>
                    <th>{$di.t->_('Name')}</th>
                    <th>{$di.t->_('Message')}</th>
                </tr>
            </thead>
        </table>
    </div>
    <script type="text/javascript">
        $(document).ready(function() {
            moment.lang('{$di.t->getLocale()}');

            var sms = {
                startDate: moment().subtract('days', 29).startOf('day'),
                endDate: moment().endOf('day'),
                table: null,
                typeTmpl: _.template('<i class="sms-<%= type %> hidden-xs" title="<%- title %>"></i><span class="visible-xs"><%- title %></span>'),
                messageLinkTemplate: _.template('<a href="{$di.router->getRouteUrl("sms")}/<%- phone %>#<%= message %>"><%- date %></a>'),
                groupMessageLinkTemplate: _.template('<a href="{$di.router->getRouteUrl("sms")}/group/<%- group %>#<%- message %>"><%- date %></a>'),
                selectRanges: {
                    "{$di.t->_('Today')}": [moment().startOf('day'), moment().endOf('day')],
                    "{$di.t->_('Yesterday')}": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                    "{$di.t->_('Last 7 Days')}": [moment().subtract('days', 6).startOf('day'), moment().endOf('day')],
                    "{$di.t->_('Last 30 Days')}": [moment().subtract('days', 29).startOf('day'), moment().endOf('day')],
                    "{$di.t->_('This Month')}": [moment().startOf('month'), moment().endOf('month')],
                    "{$di.t->_('Last Month')}": [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')],
                    "{$di.t->_('All Time')}": [ moment([2010, 11, 31, 00, 00]), moment().endOf('day')]
                },
                setRange: function(start, end) {
                    if (start.isValid() && start.isValid()) {
                        $('#reportrange span').html(start.format('LL') + ' - ' + end.format('LL'));

                        _.find(this.selectRanges, function(period, name) {
                            if ((moment(period[0]).format('l') === start.format('l')) && (moment(period[0]).format('l') === start.format('l'))) {
                                $('#reportrange span').html(name);
                                return true;
                            }
                            return false;
                        });

                        return '{$di.router->getRouteUrl("sms")}?' + $.param({
                            timeFrom: moment(start).unix(),
                            timeTo: moment(end).unix()
                        });
                    } else {
                        return this.setRange(this.startDate, this.endDate);
                    }
                },
                reloadTable: function(url) {
                    this.table.fnReloadAjax(url);
                },
                init: function() {
                    var table = $('#datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.setRange(this.startDate, this.endDate),
                        bPaginate: true,
                        bFilter: true,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[0, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [
                            {
                                bUseRendered: false,
                                sWidth: '180px',
                                mData: 'timestamp',
                                mRender: function(value, type, data) {
                                    if (data.group.length) {
                                        return sms.groupMessageLinkTemplate({
                                            date: moment(value * 1000){if isset($customUtcOffset)}.zone({$customUtcOffset}){/if}.format('lll'),
                                            group: encodeURIComponent(data.group),
                                            message: encodeURIComponent(data.timestamp)
                                        });
                                    } else {
                                        return sms.messageLinkTemplate({
                                            date: moment(value * 1000){if isset($customUtcOffset)}.zone({$customUtcOffset}){/if}.format('lll'),
                                            phone: encodeURIComponent(data.number),
                                            message: encodeURIComponent(data.timestamp)
                                        });
                                    }
                                }
                            },
                            {
                                bUseRendered: false,
                                sWidth: '80px',
                                mData: 'type',
                                mRender: function(value) {
                                    if (value === 'in') {
                                        return sms.typeTmpl({
                                            type: 'in',
                                            title: "{$di.t->_('Incoming message')}"
                                        });
                                    } else if (value === 'out') {
                                        return sms.typeTmpl({
                                            type: 'out',
                                            title: "{$di.t->_('Outgoing message')}"
                                        });
                                    } else {
                                        return '*';
                                    }
                                }
                            },
                            {
                                mData: 'number',
                                mRender: function(value) {
                                    return _.escape(value);
                                }
                            },
                            {
                                mData: 'name',
                                mRender: function(value, type, data) {
                                    if (data.group.length) {
                                        return '<b>{$di['t']->_('Group')}</b>';
                                    }
                                    
                                    return _.escape(value);
                                }
                            },
                            {
                                mData: 'content',
                                bSortable: false,
                                mRender: function(value, type, data) {
                                    var content = '';
                                    if (_.isString(value)) {
                                        if (value.length > 200) {
                                            content = value.substr(0, 200) + '...';
                                        } else {
                                            content = value;
                                        }
                                        var content = _.escape(content);
                                    }
                                    
                                    if (data.multimedia != 'none') {
                                        return '<p class="attachment ' + data.multimedia + '">' + content + '<p>';
                                    } else {
                                        return content;
                                    }
                                }
                            }
                        ],
                        fnDrawCallback: function() {
                            sms.table = table;
                            $(this).find('tbody').tableScroll();
                        }
                    });

                    this.initRangePicker();
                },
                initRangePicker: function() {
                    $('#reportrange').daterangepicker({
                        ranges: this.selectRanges,
                        startDate: this.startDate,
                        endDate: this.endDate,
                        format: 'LL',
                        locale: {
                            applyLabel: "{$di.t->_('Apply')}",
                            cancelLabel: "{$di.t->_('Cancel')}",
                            fromLabel: "{$di.t->_('From')}",
                            toLabel: "{$di.t->_('To')}",
                            customRangeLabel: "{$di.t->_('Custom Range')}",
                            daysOfWeek: moment.langData()._weekdaysMin.slice(),
                            monthNames: (function() {
                                var res = [];
                                for (var i = 0; i < 12; i++) {
                                    res.push(moment([0, i]).format('MMM'));
                                }
                                return res;
                            })(),
                            firstDay: moment.langData()._week.dow
                        }
                    }, function(from, to) {
                        sms.reloadTable(sms.setRange(from, to));
                    });
                }
            };

            sms.init();
        });
    </script>
    {else}
        {include "content/{$di.t->getLocale()}/noDataTitle.html"
                moduleName = $di.t->_('SMS')
        }
        
        {if $di.currentDevice.os=='icloud'}
            {include "content/{$di.t->getLocale()}/noDataICloud.html"
            moduleId = 'sms'
            moduleName = $di.t->_('SMS')
            }
        {else}
            {include "content/{$di.t->getLocale()}/noData.html"}
        {/if}
    {/if}
</div>