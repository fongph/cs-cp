<style>
    #slider-holder {
        padding: 15px;
    }
    
    .map-holder {
        margin-top: 10px;
    }

    #loading {
        display: none;
        text-align: center;
    }
    
    #loading .progress {
        width: 200px;
        margin: 0 auto;
    }

    #data-holder, #no-data, #allDataBlock {
        display: none;
    }

    #geo-fences-holder, #geo-fences-report {
        text-align: center;
        padding-top: 10px;
    }
    #geo-fences-report a{
        margin-top: 10px;
    }
    .scrollFix {
        line-height: 1.35;
        overflow: hidden;
        white-space: nowrap;
    }
    
    a[data-zone] {
        font-weight: 700;
    }
    
    @media (min-width: 767px) {
        #allDataBlock {
            text-align: right;
        }

        #geo-fences-holder, #geo-fences-report {
            text-align: right;
            padding: 0;
        }

    }
    .text-black {
        color: #303030;
    }
    .text-black a {
        color: #16a89e;
        font-weight: normal;
    }
</style>
<div>
    <h1 class="text-center">{$title}</h1>

    <div class="container-max">
        
        {if isset($serviceLocation) && !$serviceLocation && !$di.config.demo}
            {if $startTime > 0 || $hasZones}
                {if $di.currentDevice.os=='android'}
        <div class="alert alert-warning" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <p style="color:#303030;">
                        Location Services is currently disabled. 
                        If you want to view updated information, you need to <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/activate-location-android.html'])}" style="color: #16a89e;font-weight: normal;">activate Location Services</a>.
                    </p>
        </div>
        {else}
        <div class="alert alert-warning" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <p style="color:#303030;">
                        Location Services is currently disabled. 
                        If you want to view updated information, you need to <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/activate-location-ios.html'])}" style="color: #16a89e;font-weight: normal;">activate Location Services</a>.
                    </p>
            </div>
                {/if}
            
            {/if}
        {/if}        
        
        {if isset($showUpdateBlock)}
            {if $showUpdateBlock == 'ios'}
        <div class="alert alert-warning" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <p style="color:#303030;">Geo-fencing has become available with a new version of Pumpic mobile application. The new version of the software will be automatically updated on the target device. Please make sure that the target device is connected to the Internet.</p>
            </div>
            {else}
        <div class="alert alert-warning" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
            <p style="color:#303030;">Geo-fencing has become available with a new version of Pumpic mobile application. To install the new version, please open the Pumpic app on the target device, delete it from settings and reinstall. <a href="https://cp.pumpic.com/instructions/installing-android.html" style="color: #16a89e;font-weight: normal;">Installation instructions</a>.</p>
        </div>
            {/if}
        {/if}
        
        {insert "inc.cp.messages.htm"}

        {if $di.currentDevice.os=='icloud'}
        <div id="no-data">
            <div data-type="location-disabled">
                <div class="alert alert-warning" role="alert">
                    <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <p style="color:#303030;">{$di.t->_('Location Services is disabled. Please turn it on and continue tracking the target iOS device.')} <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/activate-location-icloud.html'])}" style="color: #16a89e;font-weight: normal;">{$di.t->_('Activate Location Services')}</a>.</p>

                </div>
            </div>
            <div data-type="no-location-data">
                <div class="alert alert-warning" role="alert">
                    <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <p style="color:#303030;">{$di.t->_('Location for the target device wasn\'t tracked yet. Please make sure whether it is connected to the Internet and try again.')} <a href="" style="color: #16a89e;font-weight: normal;" id="track-again">{$di.t->_('Try again')}</a>.</p>


                </div>
            </div>
            
            <div data-type="undefined">
                <div class="alert alert-warning" role="alert">
                    <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <p style="color:#303030;">{$di.t->_('Undefined error! Please %1$scontact support%2$s!', ['<a href="' ~ $di->getRouter()->getRouteUrl('support') ~ '" style="color: #16a89e;font-weight: normal;">', '</a>'])}</p>

                </div>
            </div>

            <div class="alert alert-warning"  id="message_undefined" role="alert">
                <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <div class="message text-black"></div>
            </div>
        </div>
        
        <div id="loading">
            <div class="progress progress-striped active">
                <div class="progress-bar" style="width: 100%"></div>
            </div>
            <p class="text-center" style="margin-top: 5px;">{$di.t->_('Tracking device location... Please stand by!')}</p>
        </div>

        <div id="button-holder" class="text-center" style="margin-bottom: 10px;">
            <button class="btn btn-primary  disable-on-demo" id="track">{$di.t->_('Request Current Location')}</button>
        </div>
        {/if}
        
        {if $startTime > 0 || $hasZones}
        <div style="margin-bottom: 10px;">
            <div id="paginator"></div>
        </div>
        
        <div id="data-holder">
            <ul class="nav nav-pills" style="overflow: hidden;">
                <li class="active"><a href="#map" data-toggle="tab">{$di.t->_('Map View')}</a></li>
                <li><a href="#table" data-toggle="tab">{$di.t->_('Table View')}</a></li>
            </ul>
            <div class="alert alert-white">
               <i class="fa fa-warning"></i>
                <em>Please, note that now we receive geodata from your Network Service provider and actual location might be different.<br />
                   To receive accurate location data, plsease turn on GPS on the target device.</em>
            </div>
            <div class="tab-content">
                <div class="tab-pane active" id="map">
                    <div class="map-holder">
                        <div id="map-canvas" style="display: block; width: 100%; height: 400px;"></div>
                    </div>
                </div>
                <div class="tab-pane" id="table">
                    <div class="table-container">
                        <table id="datatable" class="table dataTable" aria-describedby="datatables_info">
                            <thead>
                                <tr role="row">
                                    <th>{$di.t->_('Time')}</th>
                                    <th>{$di.t->_('Type')}</th>
                                    <th>{$di.t->_('Location')}</th>
                                    <th>{$di.t->_('Actions')}</th>
                                    <th>{$di.t->_('Alerts')}</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

            
            <div class="row" id="slider-holder">
                <div class="{if $di.currentDevice.os == 'icloud'}col-sm-12{else}col-sm-10{/if}">
                    <div class="row">
                        <div class="col-sm-6"><label for="slider">{$di.t->_('Accuracy:')} <span class="text-primary" id="amount">480ft</span>&nbsp;</label></div>
                        <div class="col-sm-6" id="allDataBlock">{$di.t->_('Now you see %1$s of %2$s', ['<span class="text-primary" id="percents"></span>', '<a href="" id="all-data">' ~ $di.t->_('all data') ~ '</a>'])}</div>
                    </div>
                    <div>
                        <input type="text" id="slider" style="width: 100%;" />
                    </div>
                </div>
                {if $di.currentDevice.os != 'icloud'}
                <div class="col-sm-2" id="geo-fences-holder">
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" id="onlyGeofences"> {$di.t->_('Geo-fences only')}
                        </label>
                    </div>
                    <a href="{$di.router->getRouteUrl('locationsZones')}" class="btn btn-danger">{$di.t->_('Geo-fences')}</a>
                </div>
                {if $exportEnabled}
                <div class="col-sm-12" id="geo-fences-report">
                    <a href="{$di.router->getRouteUrl('locationsExport')}" class="btn btn-primary">{$di.t->_('Geo-fences Report')}</a>
                </div>
                {/if}
                {/if}
            </div>

        </div>
        
        <script type="text/javascript">
            function customOffsetMoment(input, format, locale, strict) {
                var m = moment(input, format, locale, strict);
                {if isset($customTimezoneOffset)}
                m.zone({$customTimezoneOffset});
                {/if}
                return m;
            }
            
            
            $(document).ready(function () {
                locations = {
                    map: null,
                    dataTable: null,
                    zones: [],
                    polyline: 1,
                    data: [],
                    path: [],
                    infoWindow: null,
                    getTotalBounds: function () {
                        var bounds = new google.maps.LatLngBounds();

                        if (this.path.length + this.zones.length == 0) {
                            return false;
                        }

                        $.each(this.zones, function () {
                            bounds.union(this.getBounds());
                        });
                        
                        $.each(this.path, function () {
                            bounds.extend(this);
                        });

                        return bounds;
                    },
                    updateMapBounds: function(){
                        google.maps.event.trigger(this.getMap(), "resize");
                        
                        var bounds = this.getTotalBounds();
                        
                        if (bounds == false) {
                            this.getMap().setCenter(new google.maps.LatLng(0, 0));
                            this.getMap().setZoom(1);
                        } else {
                            this.getMap().fitBounds(bounds);
                        }
                    },
                    showInfoWindow: function (content, position) {
                        if (this.infoWindow === null) {
                            this.infoWindow = new google.maps.InfoWindow();
                        }
                        
                        this.infoWindow.close();
                        this.infoWindow.setContent('<div class="scrollFix">' + content + '</div>');
                        this.infoWindow.setPosition(position);
                        this.infoWindow.open(this.getMap());
                    },
                    getMap: function () {
                        if (this.map === null) {
                            this.map = new google.maps.Map(document.getElementById("map-canvas"), {
                                mapTypeId: google.maps.MapTypeId.ROADMAP,
                                center: new google.maps.LatLng(0, 0),
                                zoom: 0
                            });
                        } 
                        
                        return this.map;
                    },
                    getTable: function() {
                        if (this.dataTable === null) {
                            this.dataTable = $('#datatable').dataTable({
                                aaSorting: [],
                                bPaginate: false,
                                bFilter: false,
                                aoColumns: [
                                    {
                                        mData: "timestamp",
                                        type: "num",
                                        sWidth: '100px',
                                        bUseRendered: false,
                                        fnRender: function(row) {
                                            return customOffsetMoment(row.aData.timestamp * 1000).format("LT");
                                        }
                                    },
                                    {
                                        mData: "type",
                                        bUseRendered: false,
                                        fnRender: function(row) {
                                            if (row.aData.type === 'zone-enter') {
                                                return 'Geo-Fence Entered';
                                            }

                                            if (row.aData.type === 'zone-leave') {
                                                return 'Geo-Fence Left';
                                            }

                                            return 'Check-in';
                                        }
                                    },
                                    {
                                        bSortable: false,
                                        mData: null,
                                        fnRender: function(row) {
                                            var result = '<br/>Latitude: ' + row.aData.latitude + '<br/>Langitude: ' + row.aData.longitude;

                                            if (row.aData.zone) {
                                                return '<a href="" data-zone="' + row.aData.zone_id + '">' + escapeAndTruncate(row.aData.zone) + '</a>' + result;
                                            } else if (row.aData.address) {
                                                return '<b>' + row.aData.address + '</b>' + result;
                                            }

                                            return result;
                                        }
                                    },
                                    {
                                        bSortable: false,
                                        mData: null,
                                        fnRender: function() {
                                            return '<button class="btn btn-success btn-xs view-on-map"><i class="fa fa-map-marker"></i> {$di.t->_('View on map')}</button>';
                                        }
                                    },
                                    {
                                        bSortable: false,
                                        mData: null,
                                        fnRender: function(row) {
                                            var alerts = [];
                                            
                                            if (row.aData.type != 'check-in') {
                                                alerts.unshift('Control panel alert sent');
                                            }
                                            
                                            if (row.aData.email_notified > 0) {
                                                alerts.unshift('Email alert sent');
                                            }

                                            return alerts.join(', ');
                                        }
                                    }
                                ],
                                fnDrawCallback: function() {
                                    $(this).find('tbody').tableScroll();
                                }
                            });
                        }
                        
                        return this.dataTable;
                    },
                    fillTable: function(data){
                        var result = [];
                        
                        this.getTable().fnSort([]);
                        this.getTable().fnAddData(data);
                        this.getTable().fnDraw();
                        
                        this.getTable().find('tbody > tr').each(function(index) {
                            if (data[index] !== undefined && data[index].type !== 'check-in') {
                                $(this).addClass('warning');
                            } else {
                                $(this).removeClass('warning');
                            }
                        });

                        $.each(this.zones, function() {
                            $('#datatable a[data-zone=' + this.id + ']').click((function(marker) {
                                return function(e) {
                                    e.preventDefault();
                                    $('.nav-pills a[href=#map]').tab('show');
                                    google.maps.event.trigger(marker, 'click');
                                };
                            })(this.marker));
                        });
                        
                        this.getTable().dataTable().fnSort([[0, "desc"]]);
                    },
                    loadZones: function (zoneContent) {
                        var self = this;

                        return $.getJSON("{$di.router->getRouteUrl('locationsZones')}", function (data) {
                            self.zones = [];

                            $(data).each(function () {
                                var zone = new google.maps.Circle({
                                    strokeOpacity: 0.6,
                                    strokeWeight: 2,
                                    fillColor: '#0000ff',
                                    fillOpacity: 0.1,
                                    map: self.getMap(),
                                    center: new google.maps.LatLng(parseFloat(this.latitude), parseFloat(this.longitude)),
                                    radius: parseInt(this.radius),
                                    clickable: true
                                });

                                var zoneData = this;
                                
                                var image = {
                                    url: "{$di.config.staticDomain}/img/zone-icon.png",
                                    size: new google.maps.Size(20, 20),
                                    anchor: new google.maps.Point(10, 10)
                                };
                                
                                zone.marker = new google.maps.Marker({
                                    position: zone.getCenter(),
                                    icon: image,
                                    crossOnDrag: false,
                                    map: self.getMap()
                                });
                                
                                zone.id = this.id;

                                google.maps.event.addListener(zone, 'click', function () {
                                    self.showInfoWindow(zoneContent(zoneData), zone.getCenter());
                                });
                                
                                google.maps.event.addListener(zone.marker, 'click', function () {
                                    self.showInfoWindow(zoneContent(zoneData), zone.getCenter());
                                });

                                self.zones.push(zone);
                            });

                            self.zones.sort(function (a, b) {
                                return b.getRadius() - a.getRadius();
                            });

                            $.each(self.zones, function (index, zone) {
                                zone.setOptions({
                                    zIndex: index + 1
                                });
                                zone.marker.setOptions({
                                    zIndex: index + 1
                                });
                            });
                        });
                    },
                    clearData: function () {
                        if (this.polyline.markers === undefined) {
                            return;
                        }
                        
                        $.each(this.polyline.markers, function() {
                            this.setMap(null);
                        });
                        
                        this.polyline.setMap(null);
                    },
                    clearZones: function () {
                        $.each(this.zones, function() {
                            this.marker.setMap(null);
                            this.setMap(null);
                        });
                    },
                    filter: function(data) {
                        return true;
                    },
                    updateData: function() {

                        $('.alert-white').hide();
                        $('.alert-description').hide();
                        $('.fa, .fa-warning, .danger-color').hide();

                        var self = this,
                            markers = [],
                            filtered = [],
                            isAndroidDevice = false;
                        
                        this.clearData();
                        this.getTable().fnClearTable();

                        if($(".dropdown-toggle").find(".fa-android").length > 0){
                            isAndroidDevice = true;
                        }

                        this.path = [],

                        $.each(this.data, function() {

                            if(this.accuracy > 150 && isAndroidDevice) {
                                $('.alert-white').show();
                                $('.alert-description').show();
                                $('.fa, .fa-warning, .danger-color').show();
                            }

                            if (self.filter(this)) {
                                filtered.push(this);
                            }
                        });
                        
                        this.fillTable(filtered);

                        $.each(filtered, function(index, value) {

                            var latLng = new google.maps.LatLng(parseFloat(value.latitude), parseFloat(value.longitude));

                            if (index !== filtered.length - 1) {
                                var marker = new google.maps.Marker({
                                    position: latLng,
                                    map: self.getMap(),
                                    icon: {
                                        path: google.maps.SymbolPath.CIRCLE,
                                        scale: 4,
                                        fillOpacity: 1,
                                        fillColor: "#ffffff",
                                        strokeWeight: 2,
                                        strokeOpacity: 0.6
                                    }
                                });
                            } else {
                                var marker = new google.maps.Marker({
                                    position: latLng,
                                    map: self.getMap(),
                                    icon: '{$di.config.staticDomain}/img/marker-curr.png',
                                    animation: google.maps.Animation.BOUNCE
                                });
                            }

                            google.maps.event.addListener(marker, 'click', function() {
                                var content = '<b>' + customOffsetMoment(value.timestamp * 1000).format("LT") + '</b>';
                                if (value.address) {
                                    content = content + ' - ' + value.address;
                                }

                                self.showInfoWindow(content, marker.getPosition());
                            });
                            
                            $('#datatable .view-on-map').eq(filtered.length - index - 1).click((function(marker) {
                                return function() {
                                    $('.nav-pills a[href=#map]').tab('show');
                                    google.maps.event.trigger(marker, 'click');
                                };
                            })(marker));

                            markers.push(marker);
                            self.path.push(latLng);
                        });

                        this.polyline = new google.maps.Polyline({
                            path: self.path,
                            strokeColor: "#0090d3",
                            strokeOpacity: 0.6,
                            map: self.getMap(),
                            clickable: false
                        });

                        this.polyline.markers = markers;
                        
                        var percent = filtered.length * 100 / this.data.length;
                        
                        if (isNaN(percent)) {
                            $("#allDataBlock").hide();
                        } else {
                            $("#percents").text(percent.toFixed(0) + '%');
                            $("#allDataBlock").show();
                        }
                    },

                    loadData: function (dayStart) {
                        var self = this;
                        
                        return $.getJSON("{$di.router->getRouteUrl('locations')}", {
                            "dayStart": dayStart.unix()
                        }, function (data) {                            
                            self.data = data;
                            
                            self.updateData();
                        });
                    },
                    loadTrackData: function (hasZones, hasData, dayStart, zoneContent) {
                        var self = this;

                        return $.getJSON("{$di.router->getRouteUrl('locations')}?currentLocation", function (data) {
                            if (data.success) {
                                self.data = data;
                                self.load( hasZones, hasData, dayStart, zoneContent);
                                $("#data-holder").show();

                                $('#paginator').datepaginator({
                                    selectedDate: dayStart,
                                    selectedDateFormat: 'MM-DD-YYYY',
                                    showOffDays: false,
                                    showStartOfWeek: false,
                                    onSelectedDateChanged: function (event, date) {
                                        self.loadData(localAsUtc(date.startOf('day')));
                                    }
                                });
                                $('#flash-messages-container').empty();
                                
                                $("#paginator").show();
                            } else {
                                if (data.type !== undefined) {
                                    $('#flash-messages-container').empty();
                                    $("#no-data > div[data-type=" + data.type + "]").clone().appendTo('#flash-messages-container');
                                } else if (data.message !== undefined) {
                                    $('#flash-messages-container').empty();
                                    $("#no-data > #message_undefined > .message").html(data.message);
                                    $("#no-data > #message_undefined").clone().appendTo('#flash-messages-container');
                                } else {
                                    $('#flash-messages-container').empty();
                                    $("#no-data > div[data-type=undefined]").clone().appendTo('#flash-messages-container');
                                }
                                $("#paginator").show();
                                $("#data-holder").show();
                            }
                        }).error(function() {
                            $("#no-data > div[data-type=undefined]").clone().appendTo('#flash-messages-container');
                        });
                    },
                    load: function (hasZones, hasData, dayStart, zoneContent) {
                        var self = this;

                        var onComplete = function () {
                            $("#data-holder").show();
                            $("#loading").hide();
                            self.updateMapBounds();
                        };

                        if (hasZones) {
                            var deferred = this.loadZones(zoneContent);

                            if (hasData) {
                                deferred.complete(function () {
                                    var deferred = self.loadData(dayStart);
                                    deferred.complete(onComplete);
                                });
                            } else {
                                deferred.complete(onComplete);
                            }
                        } else {
                            var deferred = self.loadData(dayStart);
                            deferred.complete(onComplete);
                        }
                    },
                    loadTrack: function (hasZones, hasData, dayStart, zoneContent) {
                        var self = this;

                        $("#loading").show();
                        $("#data-holder").hide();
                        $("#paginator").hide();
                        $("#track").addClass('disable').attr('disabled', 'disabled');

                        var onComplete = function () {
                            $("#loading").hide();
                            $("#track").removeClass('disable').removeAttr('disabled');
                        };

                        var deferred = self.loadTrackData( hasZones, hasData, dayStart, zoneContent);
                        deferred.complete(onComplete);

                    },
                    init: function (hasZones, hasData, dayStart, zoneContent) {
                        var self = this;
                        this.load(hasZones, hasData, dayStart, zoneContent);

                        {if !$di.config.demo}
                        $("#track, #track-again").click(function(e){
                            e.preventDefault();

                            self.loadTrack(hasZones, hasData, dayStart, zoneContent);
                        });
                        {/if}

                        var updateValue = function(value) {
                            if (value >= 3000) {
                                $("#amount").html('3000+ ft');
                            } else {
                                $("#amount").html(value + ' ft');
                            }
                            
                            self.updateData();
                            self.updateMapBounds();
                        };
                        
                        var slider = $('#slider').slider({
                            value: 480,
                            min: 30,
                            max: 3000,
                            step: 30,
                            tooltip: 'hide'
                        }).on('slide', function (e) {
                            updateValue(e.value);
                        }).on('slideStop', function (e) {
                            self.updateData();
                            updateValue(e.value);
                        }).data('slider');
                        
                        $('#paginator').datepaginator({
                            selectedDate: dayStart,
                            selectedDateFormat: 'MM-DD-YYYY',
                            showOffDays: false,
                            showStartOfWeek: false,
                            onSelectedDateChanged: function (event, date) {
                                self.loadData(localAsUtc(date.startOf('day')));
                            }
                        });
                        
                        $("#onlyGeofences").change(function(){
                            self.updateData();
                        });
                        
                        $('#all-data').click(function(e) {
                            e.preventDefault();
                            slider.setValue(3000);
                            self.updateData();
                            updateValue(3000);
                        });
                        
                        this.getTable();
                        
                        self.filter = function(data) {                           
                            if (data.accuracy === undefined) {
                                return false;
                            }
                            
                            if ($("#onlyGeofences").is(':checked') && data.type === 'check-in') {
                                return false;
                            }

                            if (slider.getValue() >= 3000) {
                                return true;
                            }

                            return data.accuracy * 3.2808399 < slider.getValue();  
                        };
                    }
                };
                
                var zoneInfoWindowContent = function(data) {
                    var $content = $('<div class="zone-info"> ' +
                            '<div><a href="" class="zone-name" style="font-size: 15px; font-weight: bold;"></a></div>' +
                            '<div><b>{$di.t->_('Trigger on:')}</b> <span class="trigger-value"></span></div>' +
                            '<div><b>{$di.t->_('Alert to:')}</b> <span class="alert-value"></span></div>' +
                            '<div class="scheduling"><b>{$di.t->_('Scheduled')}</b></div>' +
                            '</div>');
                    
                    var url = '{$di.router->getRouteUrl('locationsZonesEdit', ['id' => '#'])}'.replace('#', data.id)
                    
                    $content.find('.zone-name').html(_.escape(data.name)).attr('href', url);
                    $content.find('.zone-edit').attr('href', url);
                    
                    var alertTo = ['{$di.t->_('Control panel')}'];
                    
                    if (data.email_alert != '0') {
                        alertTo.unshift('{$di.t->_('Email')}');
                    }
                    
                    $content.find('.alert-value').html(alertTo.join(', '));
                    
                    if (data.trigger === 'enter') {
                        $content.find('.trigger-value').html('{$di.t->_('Enter')}');
                    } else if (data.trigger === 'leave') {
                        $content.find('.trigger-value').html('{$di.t->_('Leave')}');
                    } else {
                        $content.find('.trigger-value').html('{$di.t->_('Enter')}, {$di.t->_('Leave')}');
                    }
                    
                    if (data.schedule == 0) {
                        $content.find('.scheduling').remove();
                    }
                    
                    return $content.html();
                };
            
                {if $startTime > 0}
                locations.init({if $hasZones}true{else}false{/if}, true, customOffsetMoment({$startTime} * 1000).startOf('day'), zoneInfoWindowContent);
                {else}
                locations.init({if $hasZones}true{else}false{/if}, false, customOffsetMoment(moment()).startOf('day'), zoneInfoWindowContent);
                {/if}
            });
        </script>
        {else}
        {if $di.currentDevice.os!='icloud'}
            {include "content/{$di.t->getLocale()}/noDataTitle.html"
                moduleName = $di.t->_('Locations')
            }
        {/if}
            
            {if isset($serviceLocation) && !$serviceLocation && (!$hasZones || $startTime <= 0)}
            
                {if $di.currentDevice.os=='android'}
                    <p>
                        If you want to view the information, you need to <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/activate-location-android.html'])}">activate Location Services</a>.
                    </p>
                {else}
                    <p>
                        If you want to view the information, you need to <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/activate-location-ios.html'])}">activate Location Services</a>.
                    </p>
                {/if}
            
            {else}
                {if $di.currentDevice.os!='icloud'}
                    {include "content/{$di.t->getLocale()}/noData.html"}
                    {include "content/{$di.t->getLocale()}/noDataLocations.html"}
                    <p>{$di.t->_('They will appear on map as soon as received from phone you are tracking. You can also add %1$sGeo-fences%2$s to monitor now.', ['<a href="' ~ $di.router->getRouteUrl('locationsZonesAdd') ~ '">','</a>'])}</p>
                {else}
                <script type="text/javascript">
                    $(document).ready(function(){
                        $('#track').click(function(){
                            $("#loading").show();
                            $("#data-holder").hide();
                            $("#paginator").hide();
                            $("#track").addClass('disable').attr('disabled', 'disabled');

                            var onComplete = function () {
                                $("#loading").hide();
                                $("#track").removeClass('disable').removeAttr('disabled');
                            };
                            
                            var deferred = $.getJSON("{$di.router->getRouteUrl('locations')}?currentLocation", function (data) {
                                if (data.success) {
                                    window.location = window.location;
                                } else {
                                    if (data.type !== undefined) {
                                        $('#flash-messages-container').empty();
                                        $("#no-data > div[data-type=" + data.type + "]").clone().appendTo('#flash-messages-container');
                                    } else if (data.message !== undefined) {
                                        $('#flash-messages-container').empty();
                                        $("#no-data > #message_undefined > .message").html(data.message);
                                        $("#no-data > #message_undefined").clone().appendTo('#flash-messages-container');
                                    } else {
                                        $('#flash-messages-container').empty();
                                        $("#no-data > div[data-type=undefined]").clone().appendTo('#flash-messages-container');
                                    }
                                    $("#paginator").show();
                                    $("#data-holder").show();
                                }
                            }).error(function() {
                                $("#no-data > div[data-type=undefined]").clone().appendTo('#flash-messages-container');
                            });
                            
                            deferred.complete(onComplete);
                        });
                    });
                </script>                        
                {/if}
            {/if}    
       {/if}
    </div>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.9&key=AIzaSyBQTOwjhvjk4I2-dI9JaueqNoNAi2vF6FI"></script>
</div>