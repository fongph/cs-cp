<div>
    <h1 class="text-center">{$title}</h1>

    {if !$paid}
        {insert "cp/updatePackage.html"}
    {elseif $hasRecords}
    
    {if isset($serviceKeylogger) && !$serviceKeylogger && $hasRecords}
        
        <p class="bg-warning" style="padding: 10px;">
            Keylogger is currently disabled. 
            If you want to view updated information, you need to <a href="{$di.router->getRouteUrl('content', ['uri' => 'instructions/keylogger-activation.html?activate=1'])}">activate Keylogger</a>.
        </p>
        
    {/if}
    
    <div class="daterangepickerWrapper">
        <div id="reportrange" class="btn btn-default pull-right">
            <i class="fa fa-calendar fa-lg"></i>
            <span></span>
            <b class="caret"></b>
        </div>
    </div>

    <div class="table-container">
        <table class="dataTable" id="datatables" aria-describedby="datatables_info">
            <thead>
                <tr role="row">
                    <th>{$di.t->_('Date')}</th>
                    <th>{$di.t->_('Application name')}</th>
                    <th>{$di.t->_('Logger text')}</th>
                </tr>
            </thead>
        </table>
    </div>
    <script type="text/javascript">
        $(document).ready(function() {
            var keylogger = {
                startDate: moment().subtract('days', 29).startOf('day'),
                endDate: moment().endOf('day'),
                table: null,
                selectRanges: {
                    "{$di.t->_('Today')}": [moment().startOf('day'), moment().endOf('day')],
                    "{$di.t->_('Yesterday')}": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                    "{$di.t->_('Last 7 Days')}": [moment().subtract('days', 6).startOf('day'), moment().endOf('day')],
                    "{$di.t->_('Last 30 Days')}": [moment().subtract('days', 29).startOf('day'), moment().endOf('day')],
                    "{$di.t->_('This Month')}": [moment().startOf('month'), moment().endOf('month')],
                    "{$di.t->_('Last Month')}": [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
                },
                setRange: function(start, end) {
                    if (start.isValid() && start.isValid()) {
                        $('#reportrange span').html(start.format('LL') + ' - ' + end.format('LL'));

                        _.find(this.selectRanges, function(period, name) {
                            if ((moment(period[0]).format('l') === start.format('l')) && (moment(period[0]).format('l') === start.format('l'))) {
                                $('#reportrange span').html(name);
                                return true;
                            }
                            return false;
                        });

                        return '{$di.config.domain}/cp/keylogger?' + $.param({
                            timeFrom: moment(start).unix(),
                            timeTo: moment(end).unix()
                        });
                    } else {
                        return this.setRange(startDate, moment().endOf('day'));
                    }
                },
                init: function() {
                    var table = $('.dataTable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.setRange(this.startDate, this.endDate),
                        bPaginate: true,
                        bFilter: true,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[0, 'desc']],
                        oLanguage: {
                            sUrl: "{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt"
                        },
                        aoColumns: [{
                                fnRender: function(obj, value) {
                                    return moment(value * 1000).zone(0).format('lll');
                                }
                            },
                            null,
                            {
                                bSortable: false
                            }
                        ],
                        fnDrawCallback: function() {
                            keylogger.table = table;
                            $(this).find('tbody').tableScroll();
                        }
                    });

                    this.initRangePicker();
                },
                reloadTable: function(url) {
                    if (this.table) {
                        this.table.fnReloadAjax(url);
                    }
                },
                initRangePicker: function() {
                    $('#reportrange').daterangepicker({
                        ranges: this.selectRanges,
                        startDate: this.startDate,
                        endDate: this.endDate,
                        format: 'LL',
                        locale: {
                            applyLabel: "{$di.t->_('Apply')}",
                            cancelLabel: "{$di.t->_('Cancel')}",
                            fromLabel: "{$di.t->_('From')}",
                            toLabel: "{$di.t->_('To')}",
                            customRangeLabel: "{$di.t->_('Custom Range')}",
                            daysOfWeek: moment.langData()._weekdaysMin.slice(),
                            monthNames: (function() {
                                var res = [];
                                for (var i = 0; i < 12; i++) {
                                    res.push(moment([0, i]).format('MMM'));
                                }
                                return res;
                            })(),
                            firstDay: moment.langData()._week.dow
                        }
                    }, function(from, to) {
                        keylogger.reloadTable(keylogger.setRange(from, to));
                    });
                }
            };

            keylogger.init();
        });
    </script>
    {else}
        {if $di.currentDevice.os=='android'}
            {include "content/{$di.t->getLocale()}/noDataKeyloggerAndroid.html"}
        {else}
            {include "content/{$di.t->getLocale()}/noDataTitle.html"
                moduleName = $di.t->_('Keylogger')
            }
            {include "content/{$di.t->getLocale()}/noData.html"}
        {/if}
    {/if}
</div>
