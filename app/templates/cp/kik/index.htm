<style type="text/css">
    @media (max-width: 767px) {
        .daterangepickerWrapper {
            margin-top: 10px;
        }
    }

    .nav.nav-pills {
        margin-top: 10px;
    }
</style>
<div>
    <h1 class="text-center">{$title}</h1>

    {insert "inc.flashMessages.htm"}

    {if !$paid}
        {insert "cp/updatePackage.html"}
    {elseif count($accounts)}
    <div class="row form-inline">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <label for="account">{$di.t->_('Account')} </label>
            {include "scripts/select.htm" name="account" id="account" class="form-control" options=$accounts}
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="daterangepickerWrapper">
                <div id="reportrange" class="btn btn-default pull-right">
                    <i class="fa fa-calendar fa-lg"></i>
                    <span></span>
                    <b class="caret"></b>
                </div>
            </div>
        </div>
    </div>

    <div class="table-container">
        <table class="dataTable" id="private-datatable" aria-describedby="datatables_info">
            <thead>
                <tr role="row">
                    <th>{$di.t->_('Name')}</th>
                    <th>{$di.t->_('Last Message')}</th>
                    <th>{$di.t->_('Date')}</th>
                </tr>
            </thead>
        </table>
    </div>
    <script type="text/javascript">
        $(document).ready(function() {
            var selectRanges = {
                "{$di.t->_('Today')}": [moment().startOf('day'), moment().endOf('day')],
                "{$di.t->_('Yesterday')}": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                "{$di.t->_('Last 7 Days')}": [moment().subtract('days', 6).startOf('day'), moment().endOf('day')],
                "{$di.t->_('Last 30 Days')}": [moment().subtract('days', 29).startOf('day'), moment().endOf('day')],
                "{$di.t->_('This Month')}": [moment().startOf('month'), moment().endOf('month')],
                "{$di.t->_('Last Month')}": [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
            };

            var kik = {
                startDate: moment().subtract('days', 29).startOf('day'),
                endDate: moment().endOf('day'),
                messageLinkTemplate: _.template('<a href="{$di.router->getRouteUrl("kik")}/<%= account %>/<%= tab %>/<%= id %>"><%= date %></a>'),
                table: null,
                setRange: function(start, end) {
                    this.range = [start, end];

                    if (start.isValid() && start.isValid()) {
                        this.startDate = start;
                        this.endDate = end;
                        $('#reportrange span').html(start.format('LL') + ' - ' + end.format('LL'));

                        _.find(selectRanges, function(period, name) {
                            if ((moment(period[0]).format('l') === start.format('l')) && (moment(period[0]).format('l') === start.format('l'))) {
                                $('#reportrange span').html(name);
                                return true;
                            }
                            return false;
                        });

                        var url = '{$di.config.domain}/cp/kik?';

                        return url + $.param({
                            account: $('#account').val(),
                            timeFrom: moment(start).unix(),
                            timeTo: moment(end).unix()
                        });
                    } else {
                        return setRange(this.startDate, this.endDate);
                    }
                },
                initTable: function() {
                    var table = $('#private-datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.setRange(this.startDate, this.endDate),
                        bPaginate: true,
                        bFilter: false,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[2, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [{
                                mData: "name",
                                bUseRendered: false,
                                fnRender: function(obj) {
                                    if (obj.aData.is_group > 0) {
                                        return '<b>Group</b>';
                                    } else {
                                        return obj.aData.name;
                                    }
                                }
                            },
                            {
                                mData: "text",
                                fnRender: function(obj, value) {
                                    if (_.isString(value)) {
                                        if (value.length > 200) {
                                            return value.substr(0, 200) + '...';
                                        }

                                        return value;
                                    }
                                    return '';
                                }
                            },
                            {
                                mData: null,
                                sWidth: '180px',
                                fnRender: function(obj, value) {
                                    if (obj.aData.is_group > 0) {
                                        return kik.messageLinkTemplate({
                                            account: encodeURIComponent($('#account').val()),
                                            tab: 'group',
                                            id: encodeURIComponent(obj.aData.group_id),
                                            date: moment(obj.aData.timestamp * 1000).zone(0).format('lll')
                                        });
                                    }

                                    return kik.messageLinkTemplate({
                                        account: encodeURIComponent($('#account').val()),
                                        tab: 'private',
                                        id: encodeURIComponent(obj.aData.group_id),
                                        date: moment(obj.aData.timestamp * 1000).zone(0).format('lll')
                                    });

                                    return moment(value * 1000).format('lll');
                                }
                            }],
                        fnDrawCallback: function() {
                            kik.table = table;
                            $(this).find('tbody').tableScroll();
                        }
                    });
                },
                reloadTable: function(url) {
                    this.table.fnReloadAjax(url);
                }
            };

            kik.initTable();

            $('#account').change(function() {
                kik.reloadTable(kik.setRange(kik.startDate, kik.endDate));
            });

            $('#reportrange').daterangepicker({
                ranges: selectRanges,
                startDate: kik.startDate,
                endDate: moment().endOf('day'),
                format: 'LL',
                locale: {
                    applyLabel: "{$di.t->_('Apply')}",
                    cancelLabel: "{$di.t->_('Cancel')}",
                    fromLabel: "{$di.t->_('From')}",
                    toLabel: "{$di.t->_('To')}",
                    customRangeLabel: "{$di.t->_('Custom Range')}",
                    daysOfWeek: moment.langData()._weekdaysMin.slice(),
                    monthNames: (function() {
                        var res = [];
                        for (var i = 0; i < 12; i++) {
                            res.push(moment([0, i]).format('MMM'));
                        }
                        return res;
                    })(),
                    firstDay: moment.langData()._week.dow
                }
            }, function(from, to) {
                kik.reloadTable(kik.setRange(from, to));
            });
        });
    </script>
    {else}
        {if $di.currentDevice.os=='android' && !$di.currentDevice.rooted}
            {include "content/{$di.t->getLocale()}/rootPhone.html"}
        {elseif $di.currentDevice.os=='android' && $di.currentDevice.app_version > 6 && $di.currentDevice.rooted && !$di.currentDevice.rootAccess}   
            {include "content/{$di.t->getLocale()}/rootAccessPhone.html"}    
        {else}
            {include "content/{$di.t->getLocale()}/noDataTitle.html"
                moduleName = $di.t->_('Kik')
            }
            {*<h3>{$di.t->_('Waiting for messages... Why can the data be unavailable?')}</h3>*}
            {include "content/{$di.t->getLocale()}/noData.html"
                applicationId = 'kik'
                applicationName = $di.t->_('Kik')
            }
        {/if}
    {/if}
</div>
