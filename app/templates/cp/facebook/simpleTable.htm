<div class="row form-inline">
    <div class="col-lg-6 col-md-6 col-sm-6">
        <label for="account">{$di.t->_('Account')} </label>
        {include "scripts/select.htm" name="account" id="account" class="form-control" keys=$accounts values=$accounts}
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6">
        <div class="daterangepickerWrapper">
            <div id="reportrange" class="btn btn-default pull-right">
                <i class="fa fa-calendar fa-lg"></i>
                <span></span>
                <b class="caret"></b>
            </div>
        </div>
    </div>
</div>

<div class="table-container dialogs-table">
    <table class="dataTable" id="private-datatable" aria-describedby="datatables_info">
        <thead>
            <tr role="row">
                <th>{$di.t->_('Name')}</th>
                <th>{$di.t->_('Last Message')}</th>
                <th>{$di.t->_('Date')}</th>
            </tr>
        </thead>
    </table>
</div>
<script type="text/javascript">
    $(document).ready(function() {
        var selectRanges = {
            "{$di.t->_('Today')}": [moment().startOf('day'), moment().endOf('day')],
            "{$di.t->_('Yesterday')}": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
            "{$di.t->_('Last 7 Days')}": [moment().subtract('days', 6).startOf('day'), moment().endOf('day')],
            "{$di.t->_('Last 30 Days')}": [moment().subtract('days', 29).startOf('day'), moment().endOf('day')],
            "{$di.t->_('This Month')}": [moment().startOf('month'), moment().endOf('month')],
            "{$di.t->_('Last Month')}": [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')],
            "{$di.t->_('All Time')}": [ moment([2010, 11, 31, 00, 00]), moment().endOf('day')]
        };

        var facebook = {
            startDate: moment().subtract('days', 29).startOf('day'),
            endDate: moment().endOf('day'),
            userName: _.template('<div class="external-resource"><div class="name"><%- name %></div><a href="http://facebook.com/<%= id %>" class="disable-on-demo" target="_blank"><i class="fa fa-external-link-square"></i></a></div>'),
            messageLinkTemplate: _.template('<a href="{$di.router->getRouteUrl("facebook")}/<%= account %>/<%= tab %>/<%= id %>"><%= date %></a>'),
            table: null,
            setRange: function(start, end) {
                this.range = [start, end];

                if (start.isValid() && start.isValid()) {
                    this.startDate = start;
                    this.endDate = end;
                    $('#reportrange span').html(start.format('LL') + ' - ' + end.format('LL'));

                    _.find(selectRanges, function(period, name) {
                        if ((moment(period[0]).format('l') === start.format('l')) && (moment(period[0]).format('l') === start.format('l'))) {
                            $('#reportrange span').html(name);
                            return true;
                        }
                        return false;
                    });

                    var url = '{$di.config.domain}/cp/facebook?';

                    return url + $.param({
                        account: $('#account').val(),
                        timeFrom: moment(start).unix(),
                        timeTo: moment(end).unix()
                    });
                } else {
                    return setRange(this.startDate, this.endDate);
                }
            },
            initTable: function() {
                var table = $('#private-datatable').dataTable({
                    bProcessing: true,
                    bServerSide: true,
                    sAjaxSource: this.setRange(this.startDate, this.endDate),
                    bPaginate: true,
                    bFilter: false,
                    bSort: true,
                    bInfo: true,
                    bAutoWidth: false,
                    bSortMulti: false,
                    iDisplayLength: {$authData.records_per_page},
                    aaSorting: [[2, 'desc']],
                    oLanguage: {
                        sUrl: '{$di.config.staticDomain}/datatables/language/{$di.t->getLocale()}.txt'
                    },
                    aoColumns: [{
                            mData: "name",
                            sWidth: '240px',
                            bUseRendered: false,
                            fnRender: function(obj) {
                                if (obj.aData.members > 1) {
                                    return '<div class="external-resource"><div class="name">Group</div></div>';
                                } else {
                                    return facebook.userName({
                                        id: obj.aData.id,
                                        name: obj.aData.name
                                    });
                                }
                            }
                        },
                        {
                            mData: "text",
                            fnRender: function(obj, value) {
                                var content = escapeAndTruncate(value);

                                if (obj.aData.sticker > 0) {
                                    return '<div class="attachment image"><div>';
                                } else if (obj.aData.location > 0) {
                                    return '<div class="attachment location"><div>';
                                } else if (obj.aData.attachment != null) {
                                    if (obj.aData.attachment.indexOf('image/') == 0) {
                                        return '<div class="attachment image">' + content + '<div>';
                                    } else if (obj.aData.attachment.indexOf('video/') == 0) {
                                        return '<div class="attachment video">' + content + '<div>';
                                    } else if (obj.aData.attachment.indexOf('audio/') == 0) {
                                        return '<div class="attachment audio">' + content + '<div>';
                                    } else {
                                        return '<div class="attachment other">' + content + '<div>';
                                    }
                                } else if (!content.length) {
                                    return '<div class="attachment fail"></div>';
                                } else {
                                    return content;
                                }
                            }
                        },
                        {
                            mData: null,
                            sWidth: '180px',
                            fnRender: function(obj, value) {
                                return moment(obj.aData.timestamp * 1000).format('lll');
                            }
                        }],
                    fnRowCallback: function(nRow, data) {
                        $(nRow).on('click', function() {
                            if (data.group !== null) {
                                window.location = '{$di.router->getRouteUrl("facebook")}/' + encodeURIComponent($('#account').val()) + '/group/' + encodeURIComponent(data.group);
                            } else {
                                window.location = '{$di.router->getRouteUrl("facebook")}/' + encodeURIComponent($('#account').val()) + '/private/' + encodeURIComponent(data.id);
                            }
                        });
                    },
                    fnDrawCallback: function() {
                        facebook.table = table;
                        $(this).find('tbody').tableScroll();

                        $(this).find('td a').click(function(e) {
                            if ($(this).is('.disable-on-demo')) {
                                disabledOnDemoAlert();
                                e.preventDefault();
                            }
                            e.stopPropagation();
                        });
                    }
                });
            },
            reloadTable: function(url) {
                this.table.fnReloadAjax(url);
            }
        };

        facebook.initTable();

        $('#account').change(function() {
            facebook.reloadTable(facebook.setRange(facebook.startDate, facebook.endDate));
        });

        $('#reportrange').daterangepicker({
            ranges: selectRanges,
            startDate: facebook.startDate,
            endDate: moment().endOf('day'),
            format: 'LL',
            locale: {
                applyLabel: "{$di.t->_('Apply')}",
                cancelLabel: "{$di.t->_('Cancel')}",
                fromLabel: "{$di.t->_('From')}",
                toLabel: "{$di.t->_('To')}",
                customRangeLabel: "{$di.t->_('Custom Range')}",
                daysOfWeek: moment.langData()._weekdaysMin.slice(),
                monthNames: (function() {
                    var res = [];
                    for (var i = 0; i < 12; i++) {
                        res.push(moment([0, i]).format('MMM'));
                    }
                    return res;
                })(),
                firstDay: moment.langData()._week.dow
            }
        }, function(from, to) {
            facebook.reloadTable(facebook.setRange(from, to));
        });
    });
</script>